### Current Datetime standard ###
# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html

import os
from itemadapter import ItemAdapter
from scrapy.exporters import CsvItemExporter
from scrapy.exporters import JsonLinesItemExporter

class NaverCrawlerFinalPipeline(object):
    def process_item(self, item, spider):

        dirName = "crawled"
        if not os.path.exists(dirName):
            os.makedirs(dirName)

        date = item["date"]
        filename = "naver_news_{}.json".format(date)

        filpath = os.path.join(dirName, filename)

        mode = "wb"

        if os.path.exists(filpath):
            mode = "ab"

        with open(filpath, mode) as f:
            exporter = JsonLinesItemExporter(f, encoding="utf-8")
            exporter.export_item(item)
            return item
#######################################################################
# -*- coding: utf-8 -*-

# Define here the models for your scraped items
#
# See documentation in:
# https://doc.scrapy.org/en/latest/topics/items.html

import scrapy


class NaverCrawlerFinalItem(scrapy.Item):
    # define the fields for your item here like:
    # name = scrapy.Field()
    media = scrapy.Field()
    date = scrapy.Field()
    url = scrapy.Field()
    content = scrapy.Field()
    ##################################################################
    # -*- coding: utf-8 -*-

# Define here the models for your spider middleware
#
# See documentation in:
# https://doc.scrapy.org/en/latest/topics/spider-middleware.html

from scrapy import signals


class NaverCrawlerFinalSpiderMiddleware(object):
    # Not all methods need to be defined. If a method is not defined,
    # scrapy acts as if the spider middleware does not modify the
    # passed objects.

    @classmethod
    def from_crawler(cls, crawler):
        # This method is used by Scrapy to create your spiders.
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_spider_input(self, response, spider):
        # Called for each response that goes through the spider
        # middleware and into the spider.

        # Should return None or raise an exception.
        return None

    def process_spider_output(self, response, result, spider):
        # Called with the results returned from the Spider, after
        # it has processed the response.

        # Must return an iterable of Request, dict or Item objects.
        for i in result:
            yield i

    def process_spider_exception(self, response, exception, spider):
        # Called when a spider or process_spider_input() method
        # (from other spider middleware) raises an exception.

        # Should return either None or an iterable of Response, dict
        # or Item objects.
        pass

    def process_start_requests(self, start_requests, spider):
        # Called with the start requests of the spider, and works
        # similarly to the process_spider_output() method, except
        # that it doesn’t have a response associated.

        # Must return only requests (not items).
        for r in start_requests:
            yield r

    def spider_opened(self, spider):
        spider.logger.info('Spider opened: %s' % spider.name)


class NaverCrawlerFinalDownloaderMiddleware(object):
    # Not all methods need to be defined. If a method is not defined,
    # scrapy acts as if the downloader middleware does not modify the
    # passed objects.

    @classmethod
    def from_crawler(cls, crawler):
        # This method is used by Scrapy to create your spiders.
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_request(self, request, spider):
        # Called for each request that goes through the downloader
        # middleware.

        # Must either:
        # - return None: continue processing this request
        # - or return a Response object
        # - or return a Request object
        # - or raise IgnoreRequest: process_exception() methods of
        #   installed downloader middleware will be called
        return None

    def process_response(self, request, response, spider):
        # Called with the response returned from the downloader.

        # Must either;
        # - return a Response object
        # - return a Request object
        # - or raise IgnoreRequest
        return response

    def process_exception(self, request, exception, spider):
        # Called when a download handler or a process_request()
        # (from other downloader middleware) raises an exception.

        # Must either:
        # - return None: continue processing this exception
        # - return a Response object: stops process_exception() chain
        # - return a Request object: stops process_exception() chain
        pass

    def spider_opened(self, spider):
        spider.logger.info('Spider opened: %s' % spider.name)
########################################################################
# -*- coding: utf-8 -*-

# Scrapy settings for naver_crawler_final project
#
# For simplicity, this file contains only settings considered important or
# commonly used. You can find more settings consulting the documentation:
#
#     https://doc.scrapy.org/en/latest/topics/settings.html
#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html
#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html

BOT_NAME = 'naver_crawler_final'

SPIDER_MODULES = ['naver_crawler_final.spiders']
NEWSPIDER_MODULE = 'naver_crawler_final.spiders'


# Crawl responsibly by identifying yourself (and your website) on the user-agent
#USER_AGENT = 'naver_crawler_final (+http://www.yourdomain.com)'

# Obey robots.txt rules
ROBOTSTXT_OBEY = False
FEED_EXPORT_ENCODING = 'utf-8'

# Configure maximum concurrent requests performed by Scrapy (default: 16)
CONCURRENT_REQUESTS = 32

# Configure a delay for requests for the same website (default: 0)
# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay
# See also autothrottle settings and docs
#DOWNLOAD_DELAY = 3
# The download delay setting will honor only one of:
#CONCURRENT_REQUESTS_PER_DOMAIN = 16
#CONCURRENT_REQUESTS_PER_IP = 16

# Disable cookies (enabled by default)
#COOKIES_ENABLED = False

# Disable Telnet Console (enabled by default)
#TELNETCONSOLE_ENABLED = False

# Override the default request headers:
#DEFAULT_REQUEST_HEADERS = {
#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
#   'Accept-Language': 'en',
#}

# Enable or disable spider middlewares
# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html
#SPIDER_MIDDLEWARES = {
#    'naver_crawler_final.middlewares.NaverCrawlerFinalSpiderMiddleware': 543,
#}

# Enable or disable downloader middlewares
# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html
#DOWNLOADER_MIDDLEWARES = {
#    'naver_crawler_final.middlewares.NaverCrawlerFinalDownloaderMiddleware': 543,
#}

# Enable or disable extensions
# See https://doc.scrapy.org/en/latest/topics/extensions.html
#EXTENSIONS = {
#    'scrapy.extensions.telnet.TelnetConsole': None,
#}

# Configure item pipelines
# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html
ITEM_PIPELINES = {
   'naver_crawler_final.pipelines.NaverCrawlerFinalPipeline': 300,
}

# Enable and configure the AutoThrottle extension (disabled by default)
# See https://doc.scrapy.org/en/latest/topics/autothrottle.html
#AUTOTHROTTLE_ENABLED = True
# The initial download delay
#AUTOTHROTTLE_START_DELAY = 5
# The maximum download delay to be set in case of high latencies
#AUTOTHROTTLE_MAX_DELAY = 60
# The average number of requests Scrapy should be sending in parallel to
# each remote server
#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0
# Enable showing throttling stats for every response received:
#AUTOTHROTTLE_DEBUG = False

# Enable and configure HTTP caching (disabled by default)
# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings
#HTTPCACHE_ENABLED = True
#HTTPCACHE_EXPIRATION_SECS = 0
#HTTPCACHE_DIR = 'httpcache'
#HTTPCACHE_IGNORE_HTTP_CODES = []
#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'
############################################################################
import datetime
import pandas as pd
import re

import scrapy
from naver_crawler_final.items import NaverCrawlerFinalItem
from datetime import timedelta, date, datetime

date_pattern = re.compile(r"ds=(\d{4}.\d{2}.\d{2})")
page_pattern = re.compile(r"&start=(\d+)&")


class NaverSpider(scrapy.Spider):
    name = "naver"
    crawled_url = []
    startdate = str(date.today())
    enddate = str(date.today())

    def __init__(self, start="", end="", exportdir=".", exporttype="json"):
        self.end_date = (
            datetime.strptime(self.enddate, "%Y-%m-%d")
            if end == ""
            else datetime.strptime(end, "%Y-%m-%d")
        )
        self.start_date = (
            datetime.strptime(self.startdate, "%Y-%m-%d")
            if start == ""
            else datetime.strptime(start, "%Y-%m-%d")
        )

    def start_requests(self):

        urls = []
        for cur_date in pd.date_range(self.start_date, self.end_date):
            cur_date = cur_date.strftime("%Y.%m.%d")
            url = "https://search.naver.com/search.naver?&where=news&query=%EA%B8%88%EB%A6%AC&sm=tab_pge&sort=1&photo=0&field=0&reporter_article=&pd=3&ds={0}&de={1}&docid=&nso=so:dd,p:,a:all&mynews=1&start=1&refresh_start=0".format(
                cur_date, cur_date
            )

            urls.append(url)

        return (
            scrapy.Request(
                url,
                cookies={"news_office_checked": "1001,1018,2227"},
                callback=self.parse_list,
            )
            for url in urls
        )

    def get_num(self, num_str):
        num = 0
        for i in range(len(num_str)):
            num += int(num_str[i])
        return num

    def parse_list(self, response):
        self.logger.critical(response.url)
        if response.url not in self.crawled_url:
            self.crawled_url.append(response.url)
            articles = response.xpath("//dd[@class='txt_inline']")

            for article in articles:
                media = (
                    article.xpath("./span[@class='_sp_each_source']/text()")
                    .get()
                    .strip()
                )

                if media in ["연합뉴스", "이데일리"]:
                    page_url = article.xpath("./a/@href").get()
                else:
                    page_url = article.xpath("../dt/a/@href").get()

                cur_date = re.findall(r"ds=(\d{4}.\d{2}.\d{2})", response.url)[0]

                yield scrapy.Request(
                    page_url,
                    callback=self.parse_page,
                    meta={"media": media, "date": cur_date},
                )

        cur_page = re.findall(r"&start=(\d+)&", response.url)[0]

        if self.get_num(cur_page) == int(response.css("div.paging strong::text").get()):
            next_page = int(cur_page) + 10
            url = re.sub(r"&start=(\d+)&", "&start={}&".format(next_page), response.url)

            yield scrapy.Request(
                url,
                cookies={"news_office_checked": "1001,1018,2227"},
                callback=self.parse_list,
            )

    def parse_page(self, response):
        item = NaverCrawlerFinalItem()
        item["media"] = response.meta["media"]
        item["date"] = response.meta["date"]
        item["url"] = response.url
        if item["media"] in ["연합뉴스", "이데일리"]:
            item["content"] = response.xpath(
                "//div[@id='articleBodyContents']//text()"
            ).getall()
        else:
            item["content"] = response.xpath(
                "//div[@id='article-view-content-div']//text()"
            ).getall()

        yield item
